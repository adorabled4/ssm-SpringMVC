<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 自动扫描包 -->
    <context:component-scan base-package="pers.dhx_"/>

    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver"
          class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine"> <!--模板引擎-->
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <mvc:view-controller path="/" view-name="index"/>

    <!--
    以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过
    mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求
    -->
    <!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
<!--        注意这个bean 必须通过id 获取，通过clas获取会报错-->
        <property name="maxUploadSize" value="1000000000000"/> <!--设置文件上传的最大大小-->
        <property name="defaultEncoding" value="utf-8"/> <!--设置默认编码-->
    </bean>

    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!--
    properties的键表示处理器方法执行过程中出现的异常
    properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面
    -->
                <prop key="java.lang.ArithmeticException">error</prop>
            </props>
        </property>
        <!--
    exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享
    -->
        <property name="exceptionAttribute" value="ex"></property>
    </bean>


<!--配置默认的servlet处理静态资源-->
<!--
当前工程的web.xmL配置的前端控制器Dispatcherservlet的url-pattern是/
tomcat的web.xmL配置的Defaultservlet的url-pattern也是/
此时，浏览器发送的请求会优先被DispatcherservLet进行处理，但是DispatcherservLet无法处理静态资源
若配置了<mvc : default-servLet-handLer />，此时浏览器发送的所有请求都会被DefaultservLet处理
若配置了<mvc:default-servlet-handler />和<mvc : annotation-driven />
浏览器发送的请求会先被Dispatcherservlet处理，如果无法处理在交给DefaultservLet
-->
    <mvc:default-servlet-handler/>
    <!--
    处理静态资源，例如html、js、css、jpg
    若只设置该标签，则只能访问静态资源，其他请求则无法访问
    此时必须设置<mvc:annotation-driven/>解决问题-->
    <mvc:annotation-driven>    <!-- 开启mvc注解驱动 -->
        <mvc:message-converters>
            <!-- 处理响应中文内容乱码 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="defaultCharset" value="UTF-8" />
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html</value>
                        <value>application/json</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--
path：设置处理的请求地址
view-name：设置请求地址所对应的视图名称
视图控制器：为当前的请求直接设置视图名称实现页面跳转
若设置视图控制器，则只有视图控制器所设置的请求会被处理 ,其他的请求将会全部404
此时必须再配置一个标签： <mvc:annotation-driven>  :开启mvc注解驱动
-->
<!--    配置视图控制器  当访问首页的时候，访问的默认是 view-name 里面的 内容-->

<!--    配置拦截器-->
    <bean id="firstInterceptor" class="pers.dhx_.interceptor.FirstInterceptor"/>
    <mvc:interceptors>
        <ref bean="firstInterceptor"/>
    </mvc:interceptors>

</beans>
