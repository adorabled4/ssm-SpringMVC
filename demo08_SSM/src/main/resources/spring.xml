<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--扫描组件(除了controller 以外的包)-->
    <context:component-scan base-package="pers.dhx_">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入jdbc.properties -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--开启事务注解驱动：将使用注解@Transactional标识的方法或类中的所有方法进行事务管理-->
    <tx:annotation-driven/> <!--注意要使用tx命名空间中的driven-->

<!--配置SqlSessionFactoryBean：用来可以直接工程bean提供的对象,可以直接在spring的IOC中获取SqlSessionFactory对象-->
<!--public class SqlSessionFactoryBean implements FactoryBean<SqlSessionFactory>, InitializingBean, ApplicationListener<ApplicationEvent> {}-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
<!--        设置当前的mybatis核心配置文件的路径-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dataSource"/> <!--替代mybatis 引入数据源，可以交给spring管理-->
<!--        <property name="typeAliasesPackage" value="pers.dhx_.pojo"/>  &lt;!&ndash;设置起别名的包，替代mybatis 起别名，可以交给spring管理&ndash;&gt;-->
<!--        <property name="configurationProperties" value=""/> &lt;!&ndash;全局配置，下划线映射为驼峰&ndash;&gt;-->
        <!--设置映射文件的路径若映射文件所在路径和mapper接口所在路径一致，则不需要设置-->
        <!--<property name="mapperLocations" value="classpath:mapper/*.xml"></property>-->
<!--配置分页插件-->
<!--        <property name="plugins">-->
<!--            <array>-->
<!--                <bean class="com.github.pagehelper.PageInterceptor"/>-->
<!--            </array>-->
<!--        </property>-->
    </bean>

    <!--    配置mapper扫描-->
    <!--    吧当前设置的包下面的所有的mapper接口通过上面的SqlSessionFactory所创建的SqlSession，通过这些SqlSession来创建设置的包
        下面所有接口的代理实现类对象，并且将这些对象交给IOC管理 ：可以直接在service层自动装配吗撇儿对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="pers.dhx_.mapper"/>
    </bean>

</beans>

